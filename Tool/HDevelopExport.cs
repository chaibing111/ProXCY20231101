//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.0.1
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//

using System;
using HalconDotNet;

public partial class HDevelopExport
{
#if (NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

    // Procedures 
    // Local procedures 
    public void VectorAngleCalc(HTuple hv_MatrixIn, HTuple hv_Px, HTuple hv_Py, out HTuple hv_Qx,
        out HTuple hv_Qy)
    {


        // Initialize local and output iconic variables 
        hv_Qx = new HTuple();
        hv_Qy = new HTuple();
        hv_Qx.Dispose(); hv_Qy.Dispose();
        HOperatorSet.AffineTransPoint2d(hv_MatrixIn, hv_Px, hv_Py, out hv_Qx, out hv_Qy);


        return;
    }
    public void RadCal(HTuple hv_x1, HTuple hv_y1, HTuple hv_x2, HTuple hv_y2, HTuple hv_newx1,
        HTuple hv_newy1, HTuple hv_newx2, HTuple hv_newy2, out HTuple hv_VectorCC)
    {
        // Local control variables 

        HTuple hv_Angle1 = new HTuple(), hv_Angle2 = new HTuple();
        // Initialize local and output iconic variables 
        hv_VectorCC = new HTuple();
        hv_Angle1.Dispose();
        HOperatorSet.AngleLx(hv_x1, hv_y1, hv_x2, hv_y2, out hv_Angle1);
        //自动运行点位
        hv_Angle2.Dispose();
        HOperatorSet.AngleLx(hv_newx1, hv_newy1, hv_newx2, hv_newy2, out hv_Angle2);

        hv_VectorCC.Dispose();
        HOperatorSet.VectorAngleToRigid(hv_x1, hv_y1, hv_Angle1, hv_newx1, hv_newy1,
            hv_Angle2, out hv_VectorCC);

        hv_Angle1.Dispose();
        hv_Angle2.Dispose();

        return;
    }
    public void BCD(HTuple hv_px, HTuple hv_py, out HTuple hv_Qx, out HTuple hv_Qy)
    {



        // Local iconic variables 

        // Local control variables 

        HTuple hv_mx = new HTuple(), hv_my = new HTuple();
        HTuple hv_HomMat2D = new HTuple();
        // Initialize local and output iconic variables 
        hv_Qx = new HTuple();
        hv_Qy = new HTuple();
        hv_mx.Dispose();
        hv_mx = new HTuple();
        hv_mx[0] = 5;
        hv_mx[1] = 6;
        hv_mx[2] = 7;
        hv_mx[3] = 5;
        hv_mx[4] = 6;
        hv_mx[5] = 7;
        hv_mx[6] = 5;
        hv_mx[7] = 6;
        hv_mx[8] = 7;
        hv_my.Dispose();
        hv_my = new HTuple();
        hv_my[0] = 8;
        hv_my[1] = 8;
        hv_my[2] = 8;
        hv_my[3] = 9;
        hv_my[4] = 9;
        hv_my[5] = 9;
        hv_my[6] = 10;
        hv_my[7] = 10;
        hv_my[8] = 10;
        hv_HomMat2D.Dispose();
        HOperatorSet.VectorToHomMat2d(hv_px, hv_py, hv_mx, hv_my, out hv_HomMat2D);
        hv_Qx.Dispose();
        hv_Qy.Dispose();
        HOperatorSet.AffineTransPoint2d(hv_HomMat2D, 3, 3, out hv_Qx, out hv_Qy);

        hv_mx.Dispose();
        hv_my.Dispose();
        hv_HomMat2D.Dispose();

        return;
    }

    public void RotationCC(HTuple hv_X_Mark, HTuple hv_Y_Mark, HTuple hv_X_Cen, HTuple hv_Y_Cen,
        HTuple hv_Angle, out HTuple hv_X_New, out HTuple hv_Y_New)
    {



        // Local control variables 

        HTuple hv_HomMat2DIdentity = new HTuple();
        HTuple hv_HomMat2DRotate = new HTuple();
        // Initialize local and output iconic variables 
        hv_X_New = new HTuple();
        hv_Y_New = new HTuple();

        hv_HomMat2DIdentity.Dispose();
        HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
            hv_HomMat2DRotate.Dispose();
            HOperatorSet.HomMat2dRotate(hv_HomMat2DIdentity, hv_Angle.TupleRad(), hv_X_Cen,
                hv_Y_Cen, out hv_HomMat2DRotate);
        }

        //hom_mat2d_identity (HomMat2DIdentity)
        //hom_mat2d_rotate (HomMat2DIdentity, rad(30), 0, 0, HomMat2DRotate)
        //hom_mat2d_translate (HomMat2DRotate, 200, 100, HomMat2DTranslate)

        hv_X_New.Dispose();
        hv_Y_New.Dispose();
        HOperatorSet.AffineTransPoint2d(hv_HomMat2DRotate, hv_X_Mark, hv_Y_Mark, out hv_X_New,
            out hv_Y_New);


        hv_HomMat2DIdentity.Dispose();
        hv_HomMat2DRotate.Dispose();

        return;
    }

    public void qwe(HTuple hv_px, HTuple hv_py, out HTuple hv_Qx, out HTuple hv_Qy)
    {



        // Local iconic variables 

        // Local control variables 

        HTuple hv_mx = new HTuple(), hv_my = new HTuple();
        HTuple hv_HomMat2D = new HTuple();
        // Initialize local and output iconic variables 
        hv_Qx = new HTuple();
        hv_Qy = new HTuple();
        hv_mx.Dispose();
        hv_mx = new HTuple();
        hv_mx[0] = 5;
        hv_mx[1] = 6;
        hv_mx[2] = 7;
        hv_mx[3] = 5;
        hv_mx[4] = 6;
        hv_mx[5] = 7;
        hv_mx[6] = 5;
        hv_mx[7] = 6;
        hv_mx[8] = 7;
        hv_my.Dispose();
        hv_my = new HTuple();
        hv_my[0] = 8;
        hv_my[1] = 8;
        hv_my[2] = 8;
        hv_my[3] = 9;
        hv_my[4] = 9;
        hv_my[5] = 9;
        hv_my[6] = 10;
        hv_my[7] = 10;
        hv_my[8] = 10;
        hv_HomMat2D.Dispose();
        HOperatorSet.VectorToHomMat2d(hv_px, hv_py, hv_mx, hv_my, out hv_HomMat2D);
        hv_Qx.Dispose();
        hv_Qy.Dispose();
        HOperatorSet.AffineTransPoint2d(hv_HomMat2D, 3, 3, out hv_Qx, out hv_Qy);

        hv_mx.Dispose();
        hv_my.Dispose();
        hv_HomMat2D.Dispose();

        return;
    }
    public void SaveImage(string path)
    {
        //C:/Users/CB/Desktop/567.bmp
        //public static string ImageSavePath = Application.StartupPath + "\\ResultImage\\" + DateTime.Now.ToString("yyyy-MM-dd") + "\\";
        HObject ho_Image;
        HOperatorSet.ReadImage(out ho_Image, "fabrik");
        HOperatorSet.WriteImage(ho_Image, "bmp", 0, path);

    }


#if NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    // Local control variables 

    HTuple hv_px = new HTuple(), hv_py = new HTuple();
    HTuple hv_Qx = new HTuple(), hv_Qy = new HTuple();
    // Initialize local and output iconic variables 
    hv_px.Dispose();
    hv_px = new HTuple();
    hv_px[0] = 1;
    hv_px[1] = 2;
    hv_px[2] = 3;
    hv_px[3] = 1;
    hv_px[4] = 2;
    hv_px[5] = 3;
    hv_px[6] = 1;
    hv_px[7] = 2;
    hv_px[8] = 3;
    hv_py.Dispose();
    hv_py = new HTuple();
    hv_py[0] = 1;
    hv_py[1] = 1;
    hv_py[2] = 1;
    hv_py[3] = 2;
    hv_py[4] = 2;
    hv_py[5] = 2;
    hv_py[6] = 3;
    hv_py[7] = 3;
    hv_py[8] = 3;
    hv_Qx.Dispose();hv_Qy.Dispose();
    qwe(hv_px, hv_py, out hv_Qx, out hv_Qy);

    hv_px.Dispose();
    hv_py.Dispose();
    hv_Qx.Dispose();
    hv_Qy.Dispose();

  }

#endif


}
#if (NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

